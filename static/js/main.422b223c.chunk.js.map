{"version":3,"sources":["Components/EnergyContainer.tsx","Sounds/Energy.ts","Sounds/EnergyGenerator.ts","Effects/GameTick.ts","Effects/EnergyGenerator.ts","Sounds/LevelUp.ts","Components/Plane.tsx","Screens/Game.tsx","Effects/Energy.ts","Effects/Level.ts","Screens/Welcome.tsx","App.tsx","index.tsx"],"names":["EnergyContainer","energy","ref","useRef","useFrame","current","rotation","z","y","position","castShadow","attach","Pizzicato","volume","sound","Sound","source","options","frequency","addEffect","Effects","Distortion","gain","Reverb","time","decay","reverse","mix","play","stop","Delay","feedback","callbacks","Map","doGameTick","forEach","callback","window","setTimeout","useEnergyGenerator","setEnergy","consumption","useState","generatedEnergy","setGeneratedEnergy","useEffect","EnergyGeneratorSound","navigator","getUserMedia","audio","stream","audioContent","AudioContext","audioStream","createMediaStreamSource","analyser","createAnalyser","connect","fftSize","frequencyArray","Uint8Array","frequencyBinCount","check","requestAnimationFrame","getByteFrequencyData","Math","floor","savedCallback","timestamp","Date","now","set","delete","useGameTick","inputMin","outputMin","newDesiredEnergy","Plane","receiveShadow","args","color","styles","StyleSheet","create","container","height","display","flexDirection","padding","header","alignItems","zIndex","headerTitle","flex","headerStats","main","top","right","left","bottom","Game","EnergySound","useEnergy","level","setLevel","LevelUpSound","useLevel","residents","setResidents","wattsPerResident","className","css","camera","onCreated","gl","shadowMap","enabled","type","PCFSoftShadowMap","intensity","angle","penumbra","textAlign","Welcome","onStart","onClick","App","hasStarted","setHasStarted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.422b223c.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport { useFrame } from 'react-three-fiber';\r\nimport { Mesh } from 'three';\r\n\r\nconst EnergyContainer: React.FC<{ energy: number }> = ({ energy }) => {\r\n  const ref = useRef<Mesh>(null);\r\n\r\n  useFrame(() => {\r\n    if (!ref.current) {\r\n      return;\r\n    }\r\n\r\n    ref.current.rotation.z += energy / 100;\r\n    ref.current.rotation.y += energy / 100;\r\n  });\r\n\r\n  return (\r\n    <mesh ref={ref} position={[0, 0, 2]} castShadow>\r\n      <dodecahedronBufferGeometry attach=\"geometry\" />\r\n      <meshNormalMaterial attach=\"material\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default EnergyContainer;\r\n","// @ts-ignore\r\nimport Pizzicato from 'pizzicato';\r\n\r\nPizzicato.volume = 0.5;\r\n\r\nconst sound = new Pizzicato.Sound({\r\n  source: 'wave',\r\n  options: {\r\n    frequency: 100,\r\n    volume: 0.2,\r\n  },\r\n});\r\n\r\nsound.addEffect(\r\n  new Pizzicato.Effects.Distortion({\r\n    gain: 0.2,\r\n  })\r\n);\r\n\r\nsound.addEffect(\r\n  new Pizzicato.Effects.Reverb({\r\n    time: 1,\r\n    decay: 0.8,\r\n    reverse: true,\r\n    mix: 0.5,\r\n  })\r\n);\r\n\r\nexport default {\r\n  play: () => sound.play(),\r\n  stop: () => sound.stop(),\r\n  setFrequency: (frequency: number) => (sound.frequency = frequency),\r\n};\r\n","// @ts-ignore\r\nimport Pizzicato from 'pizzicato';\r\n\r\nconst sound = new Pizzicato.Sound({\r\n  source: 'input',\r\n});\r\n\r\nsound.addEffect(\r\n  new Pizzicato.Effects.Distortion({\r\n    gain: 1,\r\n  })\r\n);\r\n\r\nsound.addEffect(\r\n  new Pizzicato.Effects.Delay({\r\n    feedback: 0.6,\r\n    time: 0.4,\r\n    mix: 0.5,\r\n  })\r\n);\r\n\r\nexport default {\r\n  play: () => sound.play(),\r\n  stop: () => sound.stop(),\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst callbacks = new Map();\r\n\r\nconst doGameTick = () => {\r\n  callbacks.forEach(callback => callback());\r\n  window.setTimeout(doGameTick, 100);\r\n};\r\n\r\ndoGameTick();\r\n\r\nexport const useGameTick = (callback: () => void) => {\r\n  const savedCallback = useRef<(...args: any[]) => void>();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const timestamp = Date.now();\r\n    const handler = (...args: any[]) => savedCallback.current && savedCallback.current(...args);\r\n\r\n    callbacks.set(timestamp, handler);\r\n\r\n    return () => {\r\n      callbacks.delete(timestamp);\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport EnergyGeneratorSound from '../Sounds/EnergyGenerator';\r\nimport { useGameTick } from './GameTick';\r\n\r\nconst scale = (value: number, inputMin: number, inputMax: number, outputMin: number, outputMax: number) => {\r\n  return ((value - inputMin) * (outputMax - outputMin)) / (inputMax - inputMin) + outputMin;\r\n};\r\n\r\nexport const useEnergyGenerator = (\r\n  energy: number,\r\n  setEnergy: React.Dispatch<React.SetStateAction<number>>,\r\n  consumption: number\r\n) => {\r\n  const [generatedEnergy, setGeneratedEnergy] = useState(0);\r\n\r\n  useEffect(() => {\r\n    EnergyGeneratorSound.play();\r\n\r\n    navigator.getUserMedia(\r\n      { audio: true },\r\n      stream => {\r\n        const audioContent = new AudioContext();\r\n        const audioStream = audioContent.createMediaStreamSource(stream);\r\n        const analyser = audioContent.createAnalyser();\r\n\r\n        audioStream.connect(analyser);\r\n        analyser.fftSize = 1024;\r\n\r\n        const frequencyArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n        const check = () => {\r\n          requestAnimationFrame(check);\r\n          analyser.getByteFrequencyData(frequencyArray);\r\n\r\n          const generatedEnergy = frequencyArray[0];\r\n          setGeneratedEnergy(Math.floor(generatedEnergy / 2));\r\n        };\r\n\r\n        check();\r\n      },\r\n      () => {}\r\n    );\r\n\r\n    return () => {\r\n      EnergyGeneratorSound.stop();\r\n    };\r\n  }, []);\r\n\r\n  useGameTick(() => {\r\n    let newDesiredEnergy = energy + scale(generatedEnergy, 0, 100, 1, 10) - consumption;\r\n\r\n    if (newDesiredEnergy >= 100) {\r\n      newDesiredEnergy = 100;\r\n    }\r\n\r\n    if (newDesiredEnergy <= 0) {\r\n      newDesiredEnergy = 0;\r\n    }\r\n\r\n    if (newDesiredEnergy > energy) {\r\n      setEnergy(energy + consumption);\r\n    } else {\r\n      setEnergy(energy - consumption);\r\n    }\r\n  });\r\n\r\n  return generatedEnergy;\r\n};\r\n","// @ts-ignore\r\nimport Pizzicato from 'pizzicato';\r\n\r\nconst sound = new Pizzicato.Sound('./assets/sounds/level-up.wav', {\r\n  options: { volume: 0.1 },\r\n});\r\n\r\nsound.addEffect(\r\n  new Pizzicato.Effects.Delay({\r\n    feedback: 0.6,\r\n    time: 0.4,\r\n    mix: 0.5,\r\n  })\r\n);\r\n\r\nexport default {\r\n  play: () => sound.play(),\r\n  stop: () => sound.stop(),\r\n};\r\n","import React from 'react';\r\n\r\nconst Plane: React.FC = () => {\r\n  return (\r\n    <mesh receiveShadow>\r\n      <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\r\n      <meshPhongMaterial attach=\"material\" color=\"#272727\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Plane;\r\n","import { css, StyleSheet } from 'aphrodite/no-important';\r\nimport React, { useEffect, useState } from 'react';\r\nimport EnergyContainer from '../Components/EnergyContainer';\r\nimport { useEnergy } from '../Effects/Energy';\r\nimport { useEnergyGenerator } from '../Effects/EnergyGenerator';\r\nimport { useLevel } from '../Effects/Level';\r\nimport { Canvas } from 'react-three-fiber';\r\nimport { PCFSoftShadowMap } from 'three';\r\nimport Plane from '../Components/Plane';\r\n\r\nconst Game: React.FC = () => {\r\n  const { energy, setEnergy } = useEnergy();\r\n  const level = useLevel(energy);\r\n  const [residents, setResidents] = useState(1);\r\n  const [wattsPerResident] = useState(1);\r\n  useEnergyGenerator(energy, setEnergy, residents * wattsPerResident);\r\n\r\n  useEffect(() => {\r\n    setResidents(level);\r\n    setEnergy(0);\r\n  }, [level, setEnergy]);\r\n\r\n  return (\r\n    <div className={css(styles.container)}>\r\n      <header className={css(styles.header)}>\r\n        <h1 className={css(styles.headerTitle)}>Overtone Reactor</h1>\r\n        <div className={css(styles.headerStats)}>\r\n          <div>Residents: {residents}</div>\r\n          <div>Watts per Resident: {wattsPerResident}</div>\r\n        </div>\r\n      </header>\r\n      <main className={css(styles.main)}>\r\n        <Canvas\r\n          camera={{ position: [0, 0, 10] }}\r\n          onCreated={({ gl }) => {\r\n            gl.shadowMap.enabled = true;\r\n            gl.shadowMap.type = PCFSoftShadowMap;\r\n          }}\r\n        >\r\n          >\r\n          <ambientLight intensity={0.5} />\r\n          <spotLight intensity={0.6} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\r\n          <Plane />\r\n          <EnergyContainer energy={energy} />\r\n        </Canvas>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    padding: 20,\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 100,\r\n    zIndex: 1,\r\n  },\r\n  headerTitle: {\r\n    flex: 1,\r\n  },\r\n  headerStats: {},\r\n  main: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    left: 0,\r\n    bottom: 0,\r\n  },\r\n});\r\n\r\nexport default Game;\r\n","import { useEffect, useState } from 'react';\r\nimport EnergySound from '../Sounds/Energy';\r\n\r\nexport const useEnergy = () => {\r\n  const [energy, setEnergy] = useState(50);\r\n\r\n  useEffect(() => {\r\n    EnergySound.play();\r\n\r\n    return () => {\r\n      EnergySound.stop();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    EnergySound.setFrequency(energy + 100);\r\n  }, [energy]);\r\n\r\n  return { energy, setEnergy };\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport LevelUpSound from '../Sounds/LevelUp';\r\n\r\nexport const useLevel = (energy: number) => {\r\n  const [level, setLevel] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (energy < 100) {\r\n      return;\r\n    }\r\n\r\n    setLevel(level => level + 1);\r\n    LevelUpSound.play();\r\n  }, [energy]);\r\n\r\n  return level;\r\n};\r\n","import { css, StyleSheet } from 'aphrodite/no-important';\r\nimport React from 'react';\r\n\r\nconst Welcome: React.FC<{ onStart: () => void }> = ({ onStart }) => {\r\n  return (\r\n    <div className={css(styles.container)}>\r\n      <h1>Overtone Reactor</h1>\r\n      <p>Welcome to the Overtone Reactor. Use your voice as a reactor to provide energy to your residents.</p>\r\n      <button onClick={onStart}>Start</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    textAlign: 'center',\r\n    padding: 20,\r\n  },\r\n});\r\n\r\nexport default Welcome;\r\n","import React, { useState } from 'react';\nimport Game from './Screens/Game';\nimport Welcome from './Screens/Welcome';\n\nconst App: React.FC = () => {\n  const [hasStarted, setHasStarted] = useState(false);\n\n  if (!hasStarted) {\n    return <Welcome onStart={() => setHasStarted(true)} />;\n  }\n\n  return <Game />;\n};\n\nexport default App;\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}